"bazel-contrib/toolchains_emscripten/tests/rules_cc"
module(name = "rules_cc_integration_tests", version = "0.0.0", compatibility_level = 1)

bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "aspect_rules_js", version = "2.1.3")
bazel_dep(name = "toolchains_emscripten", version = "0.0.0")
local_path_override(
    module_name = "toolchains_emscripten",
    path = "../.."
)

emscripten = use_extension("@toolchains_emscripten//extensions:emscripten.bzl", "emscripten")
emscripten.toolchain(
    version = "3.1.73",
    is_default = True,
)
emscripten.cache(
    pic = True,
    targets = [
        "libstubs-debug",
        "libnoexit",
        "libc-debug",
        "libdlmalloc",
        "libcompiler_rt",
        "libc++-noexcept",
        "libc++abi-debug-noexcept",
        "libsockets",
    ]
)

# NOTE the cache can be inspected with:
# bazel build --platforms=@toolchains_emscripten//platform:wasm32-emscripten @emscripten_3_1_73//:cache
# TODO add a multiple caches test

# emscripten.cache(
#     lto = True,
#     wasm64 = True,
#     targets = [
#         "crt1",
#         "libstandalonewasm-nocatch",
#         "libstubs-debug",
#         "libc-debug",
#         "libdlmalloc",
#         "libcompiler_rt",
#         "libsockets"
#     ]
# )
use_repo(emscripten, emscripten_3_1_73 = "emscripten_3_1_73")

register_toolchains("@emscripten_3_1_73//:toolchain")
# it might make sense to export emscripten_cc_binary, emscripten_cc_library etc
# for each exported toolchain, however, it is unclear how this would work with
# build systems